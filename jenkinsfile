pipeline {
    agent any
    stages {
        stage('SCM') {
            steps {
                git url: 'https://github.com/eswarpulakanti/eswarpulakanti/edit/main/jenkinsfile'
            }
        }
        stage('build && SonarQube analysis') {
            steps {
                withSonarQubeEnv('My SonarQube Server') {
                    // Optionally use a Maven environment you've configured already
                    withMaven(maven:'Maven 3.5') {
                        sh 'mvn clean package sonar:sonar'
                    }
                }
            }
        }
        withSonarQubeEnv('My SonarQube Server') { // If you have configured more than one global server connection, you can specify its name
      sh "${scannerHome}/bin/sonar-scanner"
     withSonarQubeEnv('My SonarQube Server', envOnly: true) {
  // This expands the evironment variables sonar,http://127.0.0.1:9000, sqa_e33d87950196351028342b65856e16a934c532d3.
  println ${http://127.0.0.1:9000} 
        
        stage("Quality Gate") {
            steps {
                timeout(time: 1, unit: 'HOURS') {
                    // Parameter indicates whether to set pipeline to UNSTABLE if Quality Gate fails
                    // true = set pipeline to UNSTABLE, false = don't
                    waitForQualityGate abortPipeline: true
                }
            }
        }
    }
}
